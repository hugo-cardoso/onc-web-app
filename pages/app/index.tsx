import { useState } from 'react';
import Head from 'next/head'
import { Input, TabsProcedures, ListProcedures, Text } from '@tunadao1/onc-components'
import { groupProcedureByRwy	 } from '../../src/utils/groupProcedureByRwy'
import { oncService } from '../../src/services/oncService';
import * as Styles from '../../src/styles/AppPage.styles';

import type { NextPage } from 'next'
import type { Airport, Icao, Procedure, ProcedureOptions } from '../../src/types';

const AppPage: NextPage = () => {
  const [airport, setAirport] = useState<Airport | null>(null);
  const [procedureType, setProcedureType] = useState<ProcedureOptions>('STAR');
  const [searchIcaoValue, setSearchIcaoValue] = useState('');
  const [proceduresList, setProceduresList] = useState<Procedure[]>([]);
  const [proceduresListStatus, setProceduresListStatus] = useState<'default' | 'loading' | 'empty' | 'error'>('default');
  const [proceduresQuery, setProceduresQuery] = useState<string>('');

  const updateProceduresList = async (icao: Icao, type: ProcedureOptions) => {
    setProceduresList([]);
    setProceduresListStatus('loading');

    const responseAirport = await oncService.getAirport(icao);
    const responseProcedures = await oncService.getProcedures(icao, type);

    if (
      !responseAirport.success ||
      !responseProcedures.success
    ) {
      setProceduresListStatus('error');
      return;
    }

    setAirport(responseAirport.data);

    if (responseProcedures.data.length === 0) {
      setProceduresListStatus('empty');
      return;
    }

    const parsedProcedures = responseProcedures.data.map((procedure: Procedure) => ({
      ...procedure,
      pinned: false,
      selected: false,
      group: 'Default',
    } as Procedure));

    setProceduresListStatus('default');
    setProceduresList(type === 'IAC' ? groupProcedureByRwy(responseAirport.data, parsedProcedures) : parsedProcedures);
  }

  const handleChangeProcedureType = (value: ProcedureOptions) => {
    setProcedureType(value);
    updateProceduresList(searchIcaoValue, value);
  };

  const handleSearchFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!searchIcaoValue.length) return;
    setAirport(null);
    updateProceduresList(searchIcaoValue, procedureType);
  }

  const handleChangeProcedureFilter = (value: string) => {
    setProceduresQuery(value);
  };

  const filterProcedures = (procedures: Procedure[], query: string) => {
    if (!query) return procedures;
    return procedures.filter(procedure => procedure.name.toLowerCase().includes(query.toLowerCase()));
  };

  return (
    <>
      <Head>
        <title>Open Nav Charts - App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Styles.Wrapper>
        <Styles.Sidebar>
          <Styles.SidebarNav>
            <Styles.SidebarNavItem>
             <i className="ri-home-line"></i>
            </Styles.SidebarNavItem>
            <Styles.SidebarNavItem active>
             <i className="ri-search-line"></i>
            </Styles.SidebarNavItem>
            <Styles.SidebarNavItem>
             <i className="ri-pushpin-2-line"></i>
            </Styles.SidebarNavItem>
            <Styles.SidebarNavItem>
             <i className="ri-information-line"></i>
            </Styles.SidebarNavItem>
          </Styles.SidebarNav>
          <Styles.SearchProcedure>
            <Styles.SearchProcedureForm onSubmit={handleSearchFormSubmit}>
              <Input
                label="Search"
                placeholder="Search for airport ICAO"
                onChange={(value) => setSearchIcaoValue(value)}
                initialValue={searchIcaoValue}
              />
            </Styles.SearchProcedureForm>
            <Styles.SearchProcedureTabs>
              <TabsProcedures
                initialTab={procedureType}
                onTabChange={handleChangeProcedureType}
              />
            </Styles.SearchProcedureTabs>
            {
              airport && (
                <Styles.SearchAirport>
                  <Text
                    text={`${ airport.icao } - ${ airport.name }`}
                    color='highlight'
                    size='medium'
                  />
                </Styles.SearchAirport>
              )
            }
            <Styles.SearchProcedureFilter>
              <Input
                placeholder="Filter by procedure name"
                color='dark'
                size='small'
                onChange={handleChangeProcedureFilter}
              />
            </Styles.SearchProcedureFilter>
            <ListProcedures
              procedures={filterProcedures(proceduresList, proceduresQuery) as any}
              status={proceduresListStatus}
              onClickProcedure={(procedure) => console.log(procedure)}
              onClickProcedurePin={(procedure) => console.log(`Pin ${ procedure }`)}
            />
          </Styles.SearchProcedure>
        </Styles.Sidebar>
        <Styles.Content>
          
        </Styles.Content>
      </Styles.Wrapper>
    </>
  )
}

export default AppPage
